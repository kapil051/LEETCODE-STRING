Given a pattern and a string s, find if s follows the same pattern.

Here follow means a full match, such that there is a bijection between a letter in pattern and a non-empty word in s.

 

Example 1:

Input: pattern = "abba", s = "dog cat cat dog"
Output: true
Example 2:

Input: pattern = "abba", s = "dog cat cat fish"
Output: false
Example 3:

Input: pattern = "aaaa", s = "dog cat cat dog"
Output: false
 

Constraints:

1 <= pattern.length <= 300
pattern contains only lower-case English letters.
1 <= s.length <= 3000
s contains only lowercase English letters and spaces ' '.
s does not contain any leading or trailing spaces.
All the words in s are separated by a single space.

*****************************************************************************USING MAPS***************************************************************************

class Solution {
public:
    bool wordPattern(string pattern, string s) {
        
          vector<string> words;
        
             string ans="";
        
        for(int i=0;i<=s.size();i++){
            
            if(s[i]==' '||s[i]=='\0'){
                words.push_back(ans);
                ans="";
            }
            
            else{
              ans+=s[i];  
            }
            
        }
        
        if(pattern.size()!=words.size()) return false;
        
        
        unordered_map<char,string> mp1;
        
        unordered_map<string,bool> mp2;
        
        
        for(int i=0;i<pattern.size();i++){
         
            if(mp1.count(pattern[i])==0){
                
                 if(mp2[words[i]]==true) return false;
                
                 mp1[pattern[i]]=words[i];
                
                 mp2[words[i]]=true;
            } 
            
            else{
                
                if(mp1[pattern[i]]!=words[i]) return false;
 
            }
            
        }
    
        return true;
    }
};
