Two strings are considered close if you can attain one from the other using the following operations:

Operation 1: Swap any two existing characters.
For example, abcde -> aecdb
Operation 2: Transform every occurrence of one existing character into another existing character, and do the same with the other character.
For example, aacabb -> bbcbaa (all a's turn into b's, and all b's turn into a's)
You can use the operations on either string as many times as necessary.

Given two strings, word1 and word2, return true if word1 and word2 are close, and false otherwise.

 

Example 1:

Input: word1 = "abc", word2 = "bca"
Output: true
Explanation: You can attain word2 from word1 in 2 operations.
Apply Operation 1: "abc" -> "acb"
Apply Operation 1: "acb" -> "bca"
Example 2:

Input: word1 = "a", word2 = "aa"
Output: false
Explanation: It is impossible to attain word2 from word1, or vice versa, in any number of operations.
Example 3:

Input: word1 = "cabbba", word2 = "abbccc"
Output: true
Explanation: You can attain word2 from word1 in 3 operations.
Apply Operation 1: "cabbba" -> "caabbb"
Apply Operation 2: "caabbb" -> "baaccc"
Apply Operation 2: "baaccc" -> "abbccc"


****************************************************APPROACH 1(USING UNORDERED MAPS)***********************************************************

// class Solution {
// public:
//     bool closeStrings(string word1, string word2) {
        
//         if(word1.size()!=word2.size()) return false;
        
//         unordered_map<char,int> mp1;
        
//         unordered_map<char,int> mp2;
        
        
//         unordered_map<char,bool> fir;
        
//          unordered_map<char,bool> sec;
    
//         for(int i=0;i<word1.size();i++){
         
//             fir[word1[i]]=true;
       
//             mp1[word1[i]]++;
       
//         } 
        
//         for(int i=0;i<word2.size();i++) {
            
//             sec[word2[i]]=true;

//             mp2[word2[i]]++;
            
//         }
        
//         for(auto &i:fir){
            
//             if(sec[i.first]==false) return false;
            
//         }
        
    
//             vector<int> v1;
//             vector<int> v2;
        
//         for(auto &i:mp1){
            
//             cout<<i.second<<" ";
            
//             v1.push_back(i.second);
//         }
        
//         cout<<endl;
        
//           for(auto &i:mp2){
              
//               cout<<i.second<<" ";
              
//             v2.push_back(i.second);
//         }
        
//         sort(v1.begin(),v1.end());
//         sort(v2.begin(),v2.end());
        
//         return v1==v2;
//     }
// };

******************************************************************************APPROACH 2(USING VECTORS)******************************************

class Solution {
public:
    bool closeStrings(string word1, string word2) {
        
        if(word1.size()!=word2.size()) return false;
        
        //TWO CONDITIONS ARE NEEDED TO CHECK
        
        //1 IS NEED TO CHECK ALL THE UNIQUE CHARACTERS ARE SAME
        
        // S1= A B C
        // S2= A B C
        
        //2 IS THAT THE FRQUENCY OF ELEMENTS ARE SAME IN BOTH WORDS
        
        //F1=1 2 3 3
        //F2=1 2 3 3
        
        
        //STORING THE UNIQUE CHARACTER OF BOTH THE STRING
        vector<bool> v1(26,false);
        vector<bool> v2(26,false);
        
        //STORING FREQUENCY OF THE CHARACTERS
        vector<int> v3(26,0);
        vector<int> v4(26,0);
        
        
        for(auto &i:word1){
            
             v3[i-'a']++;
            
            v1[i-'a']=true;
        }
        
        for(auto &i:word2){
            
              v4[i-'a']++;
            
              v2[i-'a']=true;
        }
        
        //CHECK BOTH STRING HAVE SAME UNIQUE ELEMENTS
        
        if(v1!=v2) return false;
        
        
        sort(v3.begin(),v3.end());
        sort(v4.begin(),v4.end());
        
        //CHECK BOTH THE VECTORS ARE SAME OF FREQUENCY OF CHARACTERS
        
        return v3==v4;
    }
};
